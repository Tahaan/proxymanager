#!/bin/sh
# This file is part of ProxyManager.  It is a tempalte for writing a new
# modules as if there are not enough working examples in the modules
# directory (Hint Hint)
# 
# This file should be read in conjunction with the MODULE_HOWTO included
# in the docs directory.

# Copyright YEAR YOUR-NAME-HERE
# See the README.module file for contact and additional information
# NOTE:  For modules contributed from the community I imagine there will
# be separate README files.  If those moduls become part of the main
# branch, and with your permission, I would consider adding the necessary
# information, as well as attribution, to the main README file.  Or not.

# ProxyManager module to manage proxy setting for MyApplication
# This works for bla bla bla...

# If this module is a user-specific module, remove this and the next line
# Run with root priv to affect Global System Configuration

# System (root priv) modules need to source the main config file.  This
# doesn't really harm normal modules.
. /etc/proxymanager.conf

# Source the shared functions to set up a TempFile, Parse Config templates, 
. $PM_INSTALL_DIR/modules/.sharedfunctions

# Specify path to config file for this application
# For user modules you can use PM_USERNAME, eg:
# MODULEX_CF=$PM_USERHOME/.wgetrc
MODULEX_CF=....  

# If needed give it a Temp work file
GetUniqueTempFile MODULENAME

# History lesson:  Why do I see "pon" everywhere?
# Because this whole system started off as a shell alias called "pon", short
# for "proxy on", and misnamed because it also turned the proxy settings off.

case "$1" in
  on)
    echo Enabling for MyApplication
    # Remove Old Proxy settings from Application Config file
    [ -f $MODULEX_CF ] && grep -v "^[^#].*_proxy" $MODULEX_CF > $TEMPFILE
    # Add Entried from the Template to the New Config File
    ParseTemplate $PM_INSTALL_DIR/templates/enable_MODULENAME >> $TEMPFILE
    # Overwrite the main config file 
    mv $TEMPFILE $MODULEX_CF
    # And maybe signal the application
    kill -HUP $( pgrep MyApplication )
       # Or possible restart the application, or check if it is running and 
       # tell the user to restart it, etc.
    ;;
  off)
    echo Disabling for MyApplication
    # Remove any proxy settings from Application Config file
    [ -f $MODULEX_CF ] && grep -v "^[^#].*_proxy" $MODULEX_CF > $TEMPFILE
    # Overwrite the main config file 
    mv $TEMPFILE $MODULEX_CF
    # And maybe signal the application
    kill -HUP $( pgrep MyApplication )
    ;;
  check)
    # Check whether config file indicates that proxy is to be used
    MODULEX_CHECK=$(grep -ci [^#]*proxy $MODULEX_CF 2>/dev/null ) || MODULEX_CHECK=None
    # And report on the findings
    echo MyApplication: $MODULEX_CHECK
    ;;
esac
